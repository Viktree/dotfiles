# This is Git's per-user configuration file.

[user]

  name = Vikram Venkataramanan
  email = vikram.venkataramanan@mail.utoronto.ca
  initials = VV

[github]

  user = viktree

[core]

  editor = nvim
  excludesfile = ~/.gitignore
  # insanely beautiful diffs ==> npm install -g diff-so-fancy
  pager = diff-so-fancy | less --tabs=1,5 -R

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "status"]

  changed = yellow
  added = green
  untracked = red

[color "diff"]

  # Colour for file information at the top of diff
  meta = yellow bold

  # Color for
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[help]

  autocorrect = 1

[alias]

  # These are aliases for git. Prefixing them with an ! treats the command as a new shell command.
  # List all the aliases that I have set. Need to figure out how to better format this
  # later
  aliases = config --get-regexp ^alias\\.

  # Get a list of contributors
  who = shortlog -n -s --no-merges

  # Open the link soon
  origin-url = remote get-url origin
  open = "!open $(git origin-url)"

  # Discard the changes that were made a particular file
  discard = checkout --

  # Fetches a .gitignore template for the project
  generate-ignore = "!gi() { curl -L -s https://www.gitignore.io/api/$@ ;}; gi"

  # Simple status update
  brief = status -s

  # Cleanup unnecessary stuff
  cleanup = remote prune origin && git gc && git stash clear

  # === List files ===

  # Lists all the files that were tracked by git
  ls-tracked = ls-tree -r HEAD --name-only

  # Lists all the files that were ignored by git
  ls-ignored = ls-files --others -i --exclude-standard

  # === Commits ===

  # Initial Commit
  initial-commit = commit --allow-empty -m 'Initial commit'

  # Amend the previous commit
  amend = commit --amend

  # Add the stuff that got left out of the commit
  fix = commit -a --amend --no-edit

  # === Readable Logs ===
  extended-log = log --graph --branches --remotes --tags
  graph = "!git extended-log --format=format:'%Cgreen%h %Creset %s (%cN, %cr) %Cred%d'"
  summary = reflog --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]"
  undo = reset HEAD --hard

  uncommit = reset --mixed HEAD~
  unstage = reset -q HEAD --

  # === Branch related stuff ===

  # Get the name of the current branch, this is useful in other commands
  branch-name = rev-parse --abbrev-ref HEAD

  # Some simple actions around branches
  local-branches = "!git branch | fzf"
  all-branches = "!git branch -a | fzf"
  new-branch = checkout -b
  switch-branch = "!git checkout $(git all-branches)"
  rename-branch = branch -m
  delete-branch = "!git branch -D $(git local-branches)"
  # clear-workspace = "!git branch | grep -v \* | xargs $(git delete-branch)"

  # Push the changes
  push-branch = "!git push -u origin $(git branch-name)"
  publish = "!git push -u origin $(git branch-name)"

  # Use this to force push changes. Typically for use after a rebase
  push-branch-f = "!git push --force-with-lease -u origin $(git branch-name)"
  publish-fix = "!git push --force-with-lease -u origin $(git branch-name)"

  # Undo a push
  unpush-branch = "!git push origin :$(git branch-name)"
  unpublish = "!git push origin :$(git branch-name)"

  # Snapshots
  snapshot = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

[commit]

  # Use this file as a template when git commit is run
  template = ~/.gitmessage

[credential]

  # Make Mac OSX plays well with git
  helper = osxkeychain
